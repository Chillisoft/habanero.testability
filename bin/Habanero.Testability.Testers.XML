<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Habanero.Testability.Testers</name>
    </assembly>
    <members>
        <member name="T:Habanero.Testability.Testers.BOTester">
            <summary>
            This is a specialised Tester for testing Habanero.<see cref="T:Habanero.Base.IBusinessObject"/> 
            This tester provides methods for testing the basic aspects of properties of
            a business object see <see cref="T:Habanero.Base.IPropDef"/>
            such as ShouldBeCompulsory.
            </summary>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester.ShouldHaveAllPropsMapped">
            <summary>
            For each property defined in the ClassDefs for this Business
            Object should have all Properties Mapped.<br/>
            
            See <see cref="M:Habanero.Testability.Testers.BOTester.ShouldHavePropertyMapped(System.String)"/> for more details on how this 
            mapping testing is done.
            </summary>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester.ShouldHavePropertyMapped(System.String)">
            <summary>
            Tests that the Mapping within the Property Gettter and Setter
            are mapped correctly i.e. the string "ProspectTypeName" in 
            the Getter and the string "ProspectTypeName" in the setter are 
            both the same and they are mapped to a valid property Def in the ClassDef.
            <code>
             public virtual string ProspectTypeName
             {
                 get { return ((string)(base.GetPropertyValue("ProspectTypeName"))); }
                 set { base.SetPropertyValue("ProspectTypeName", value); }
             }
            </code>
            This is done by setting the Property via reflection (if it has a set)
            and setting it via reflection (if it has a get) and comparing these values
            to the values for the BOProp to ensure that all mappings are correct.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester.ShouldHaveSingleRelationshipMapped(System.String)">
            <summary>
            Tests that the Mapping within the Property Gettter and Setter
            of a relationship are mapped correctly i.e. the string "SingleRelGetterNotMapped" in 
            the Getter and the string "SingleRelationship" in the setter are 
            both the same and they are mapped to a valid <see cref="T:Habanero.Base.IRelationshipDef"/> in the ClassDef
            <see cref="T:Habanero.Base.IClassDef"/>.
            <code>
              public virtual FakeBO SingleRelationship
              {
                  get { return Relationships.GetRelatedObject{FakeBO}("SingleRelationship"); }
                  set { Relationships.SetRelatedObject("SingleRelationship", value); }
              }
            </code>
            This is done by setting the Property via reflection (if it has a set)
            and setting it via reflection (if it has a get) and comparing these values
            to the values for the BOProp to ensure that all mappings are correct.
            </summary>
            <param name="relationshipName"></param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester.GetPropTester(System.String)">
            <summary>
            Returns a <see cref="T:Habanero.Testability.Testers.PropDefTester"/> for the property specified by propName
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester.GetSingleRelationshipTester(System.String)">
            <summary>
            Returns a <see cref="T:Habanero.Testability.Testers.PropDefTester"/> for the property specified by propName
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="T:Habanero.Testability.Testers.BOTester`1">
            <summary>
            This is a specialised Tester for testing Habanero.<see cref="T:Habanero.Base.IPropDef"/> 
            This tester provides methods for testing the basic attributes of a <see cref="T:Habanero.Base.IPropDef"/>
            such as ShouldBeCompulsory.
            </summary>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.ShouldHavePropertyMapped(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Tests that the Mapping within the Property Gettter and Setter
            are mapped correctly i.e. the string "ProspectTypeName" in 
            the Getter and the string "ProspectTypeName" in the setter are 
            both the same and they are mapped to a valid property Def in the ClassDef.
            <code>
             public virtual string ProspectTypeName
             {
                 get { return ((string)(base.GetPropertyValue("ProspectTypeName"))); }
                 set { base.SetPropertyValue("ProspectTypeName", value); }
             }
            </code>
            This is done by setting the Property via reflection (if it has a set)
            and setting it via reflection (if it has a get) and comparing these values
            to the values for the BOProp to ensure that all mappings are correct.
            </summary>
            <param name="propExpression"></param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.ShouldHaveSingleRelationshipMapped(System.Linq.Expressions.Expression{System.Func{`0,Habanero.Base.IBusinessObject}})">
            <summary>
            Tests that the Mapping within the Property Gettter and Setter
            of a relationship are mapped correctly i.e. the string "SingleRelGetterNotMapped" in 
            the Getter and the string "SingleRelationship" in the setter are 
            both the same and they are mapped to a valid <see cref="T:Habanero.Base.IRelationshipDef"/> in the ClassDef
            <see cref="T:Habanero.Base.IClassDef"/>.
            <code>
              public virtual FakeBO SingleRelationship
              {
                  get { return Relationships.GetRelatedObject{FakeBO}("SingleRelationship"); }
                  set { Relationships.SetRelatedObject("SingleRelationship", value); }
              }
            </code>
            This is done by setting the Property via reflection (if it has a set)
            and setting it via reflection (if it has a get) and comparing these values
            to the values for the BOProp to ensure that all mappings are correct.
            </summary>
            <param name="singleRelExpression"></param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.ShouldHaveDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Raises <see cref="T:NUnit.Framework.AssertionException"/> if the prop identified by
            <paramref name="propExpression"/> does not have a default value set.
            Does nothing otherwise
            </summary>
            <param name="propExpression"></param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.ShouldNotHaveDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Raises <see cref="T:NUnit.Framework.AssertionException"/> if the prop identified by
            <paramref name="propExpression"/> has a default value set.
            Does nothing otherwise
            </summary>
            <param name="propExpression"></param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.ShouldHaveDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Raises <see cref="T:NUnit.Framework.AssertionException"/> if the prop identified by
            <paramref name="propExpression"/> does not have a default value set.
            Does nothing otherwise
            </summary>
            <param name="propExpression"></param>
            <param name="defaultValue">The default value for this property.</param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.ShouldNotHaveDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Raises <see cref="T:NUnit.Framework.AssertionException"/> if the prop identified by
            <paramref name="propExpression"/> has a default value set.
            Does nothing otherwise
            </summary>
            <param name="propExpression"></param>
            <param name="expectedDefaultValue"></param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.ShouldBeCompulsory(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Raises <see cref="T:NUnit.Framework.AssertionException"/> if the prop identified by
            <paramref name="propExpression"/> does not have a default value set.
            Does nothing otherwise
            </summary>
            <param name="propExpression"></param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.ShouldNotBeCompulsory(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Raises <see cref="T:NUnit.Framework.AssertionException"/> if the prop identified by
            <paramref name="propExpression"/> does not have a default value set.
            Does nothing otherwise
            </summary>
            <param name="propExpression"></param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.ShouldHaveReadWriteRule(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Habanero.Base.PropReadWriteRule)">
            <summary>
            Raises <see cref="T:NUnit.Framework.AssertionException"/> if the prop identified by
            <paramref name="propExpression"/> does not have a default value set.
            Does nothing otherwise
            </summary>
            <param name="propExpression"></param>
            <param name="expectedReadWriteRule">The expected ReadWriteRule</param>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.GetPropTester(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Returns a <see cref="T:Habanero.Testability.Testers.PropDefTester"/> for the property specified by <paramref name="propExpression"/>
            </summary>
            <param name="propExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Habanero.Testability.Testers.BOTester`1.GetSingleRelationshipTester(System.Linq.Expressions.Expression{System.Func{`0,Habanero.Base.IBusinessObject}})">
            <summary>
            Returns a <see cref="T:Habanero.Testability.Testers.PropDefTester"/> for the property specified by <paramref name="propExpression"/>
            </summary>
            <param name="propExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Habanero.Testability.Testers.PropDefTester">
            <summary>
            This is a specialised Tester for testing Habanero.<see cref="T:Habanero.Base.IPropDef"/> 
            This tester provides methods for testing the basic attributes of a <see cref="T:Habanero.Base.IPropDef"/>
            such as ShouldBeCompulsory.
            </summary>
        </member>
        <member name="M:Habanero.Testability.Testers.SingleValueTester.ShouldHavePropertyMapped">
            <summary>
            Tests that the Mapping within the Property Gettter and Setter
            are mapped correctly i.e. the string "ProspectTypeName" in 
            the Getter and the string "ProspectTypeName" in the setter are 
            both the same and they are mapped to a valid property Def in the ClassDef.
            <code>
             public virtual string ProspectTypeName
             {
                 get { return ((string)(base.GetPropertyValue("ProspectTypeName"))); }
                 set { base.SetPropertyValue("ProspectTypeName", value); }
             }
            </code>
            
            Or in the case of a single relationship
            Should be mapped to a valid <see cref="T:Habanero.Base.ISingleRelationshipDef"/> in the ClassDef
            <see cref="T:Habanero.Base.IClassDef"/>.
            <code>
              public virtual FakeBO SingleRelationship
              {
                  get { return Relationships.GetRelatedObject{FakeBO}("SingleRelationship"); }
                  set { Relationships.SetRelatedObject("SingleRelationship", value); }
              }
            </code>
            This is done by setting the Property via reflection (if it has a set)
            and setting it via reflection (if it has a get) and comparing these values
            to the values for the BOProp to ensure that all mappings are correct.
            </summary>
        </member>
        <member name="T:Habanero.Testability.Testers.SingleRelDefTester">
            <summary>
            This is a specialised Tester for testing Habanero.<see cref="T:Habanero.Base.IRelationshipDef"/> 
            This tester provides methods for testing the basic attributes of a <see cref="T:Habanero.Base.IRelationshipDef"/>
            such as ShouldBeIsCompulsory.
            </summary>
        </member>
        <member name="P:Habanero.Testability.Testers.SingleRelDefTester.RelationshipName">
            <summary>
            The Name of the SingleRelationshipDef that is being tested.
            </summary>
        </member>
    </members>
</doc>
