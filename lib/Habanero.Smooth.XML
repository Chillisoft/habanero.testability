<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Habanero.Smooth</name>
    </assembly>
    <members>
        <member name="T:Habanero.Smooth.ITypeSource">
            <summary>
            A source for Type instances, acts as a facade for an Assembly or as an alternative Type provider.
            </summary>
        </member>
        <member name="M:Habanero.Smooth.AllClassesAutoMapperExtensions.MapClasses(System.Reflection.Assembly)">
            <summary>
            Maps All classes in the Given Assembly to a <see cref="T:Habanero.Base.ClassDefCol"/>
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Habanero.Smooth.AllClassesAutoMapperExtensions.MapClasses(System.Type)">
            <summary>
            Maps all classes in the Assembly for the given type <see cref="T:Habanero.Base.ClassDefCol"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Habanero.Smooth.AllClassesAutoMapperExtensions.MapClasses(System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Maps all classes in the Assembly for the given type <see cref="T:Habanero.Base.ClassDefCol"/>
            </summary>
            <param name="type"></param>
            <param name="where">a valid where clause used to limit the Classes being mapped</param>
            <returns></returns>
        </member>
        <member name="T:Habanero.Smooth.AllClassesAutoMapper">
            <summary>
            Maps all Business Objects in an ITypeSource to a <see cref="T:Habanero.Base.IClassDef"/>
            </summary>
        </member>
        <member name="M:Habanero.Smooth.AllClassesAutoMapper.RelatedObjectClassDef(Habanero.Base.ClassDefCol,Habanero.Base.IRelationshipDef)">
            <summary>
            The <see cref="T:Habanero.BO.ClassDefinition.ClassDef"/> for the related object.
            </summary>
        </member>
        <member name="M:Habanero.Smooth.AssemblyTypeSource.#ctor(System.Type)">
            <summary>
            sets the assembly to be the assembly that the Type type belongs to.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Habanero.Smooth.Guard">
            <summary>
            Performs common argument validation.
            </summary>
        </member>
        <member name="M:Habanero.Smooth.Guard.AgainstNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argumentValue"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="argumentValue"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:Habanero.Smooth.Guard.AgainstEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't empty.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argumentValue"/> is <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:Habanero.Smooth.Guard.AgainstNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argumentValue"/> is a null reference.</exception>
        </member>
        <member name="T:Habanero.Smooth.OneToOneAutoMapper">
             <summary>
            Conventions
             1) If no single reverse relationship and no Attribute is found then it is assumed that relationship is a M:1 i.e. its rev is a 1:M
             2) If no single rev rel and 1:1Attribute with no RevRelName then RevRelName = ClassName
             3) If no single rev rel and 1:1Att with RevRelName then RevRelName = DeclaredRevRelName
             4) If has single rev rel then RevRelName = foundRevRelationshipName 
             Determing RelatedProps 
             if ownerClass.HasProp(RelName+ID) and relatedClass.NotHasProp(RevRelName+ID) 
                  owningBOHasForeignKey = true;
                  ownerProp = foundOwnerPropName
                  relatedProp = RelatedClass.ID.
             if relatedClass.HasProp(reverseRel+ID) and ownerClass.NotHasProp(RelName+ID)
                  owningBOHasForeignKey = false;
                  ownerProp = OwnerClass.Id
                  relatedProp = foundRelatedPropName
             if ownerClass.HasProp(RelName+ID) and relatedClass.HasProp(RevRelName+ID)
                  if(RelName == relatedClassName) owningBOHasForeignKey = true;
                  ownerProp = foundOwnerClassId
                  relatedProp = foundRelatedPropName
             Else if ownerClassName LT relatedClassName
                 owningBOHasForeignKey = false;
                 ownerProp = OwnerClassId
                 relatedProp = reverseRelationshipName+ID
             Else
                owningBOHasForeignKey = true;
                ownerProp = RelationshipName+ID
                relatedProp = RelatedClass.ID
             </summary>
        </member>
        <member name="M:Habanero.Smooth.PropertyAutoMapper.MapProperty">
            <summary>
            Will attempt to map a PropertyInfo to an IPropDef.
            If it cannot be mapped then will return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Habanero.Smooth.ReflectionWrappers.PropertyWrapper.GetSingleReverseRelPropInfos">
            <summary>
            Gets all single ReverseRelationship 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Habanero.Smooth.ReflectionWrappers.PropertyWrapper.GetSingleReverseRelationshipName``1">
            <summary>
            If no single rev rel and Attribute with no RevRelName then RevRelName = ClassName
            If no single rev rel and Att with RevRelName then RevRelName = DeclaredRevRelName
            If has single rev rel then RevRelName = foundRevRelationshipName 
            </summary>
            <typeparam name="TAttributeType"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Habanero.Smooth.ReflectionWrappers.PropertyWrapper.HasIgnoreAttribute">
            <summary>
            Returns true if the <see cref="P:Habanero.Smooth.ReflectionWrappers.PropertyWrapper.PropertyInfo"/> has an <see cref="T:Habanero.Smooth.AutoMapIgnoreAttribute"/>
            false otherwise. Returns false if propInfo is null
            </summary>
            <value></value>
        </member>
        <member name="P:Habanero.Smooth.ReflectionWrappers.PropertyWrapper.HasDefaultAttribute">
            <summary>
            Returns true if the Property has a <see cref="T:Habanero.Smooth.AutoMapDefaultAttribute"/> set on it.
            </summary>
        </member>
        <member name="P:Habanero.Smooth.ReflectionWrappers.PropertyWrapper.HasCompulsoryAttribute">
            <summary>
            Returns true if this property has the <see cref="T:Habanero.Smooth.AutoMapCompulsoryAttribute"/>
            </summary>
        </member>
        <member name="M:Habanero.Smooth.ReflectionWrappers.ReflectionExtensions.GetBaseDefinition(System.Reflection.PropertyInfo)">
            <summary>
            When overridden in a derived class, returns the <see cref="!:propertyInfo"/> object for the
            method on the direct or indirect base class in which the property represented
            by this instance was first declared.
            </summary>
            <returns>A <see cref="!:propertyInfo"/> object for the first implementation of this property.</returns>
        </member>
        <member name="M:Habanero.Smooth.ReflectionWrappers.TypeWrapper.GetNullableUndelyingType">
            <summary>
            Returnes the Prop Type for the PropertyInfo.
            If the PropertyInfo is Nullable then it returns the underlying type. 
            (i.e bool? will return bool)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Habanero.Smooth.ReflectionWrappers.TypeWrapper.Name">
            <summary>
            Returns the Types Name
            </summary>
        </member>
        <member name="P:Habanero.Smooth.ReflectionWrappers.TypeWrapper.Namespace">
            <summary>
            Returns the Types Name
            </summary>
        </member>
        <member name="P:Habanero.Smooth.ReflectionWrappers.TypeWrapper.IsGenericType">
            <summary>
            Returns true if this type si a Generic Type
            </summary>
        </member>
        <member name="P:Habanero.Smooth.ReflectionWrappers.TypeWrapper.BaseType">
            <summary>
            Returns the Base Type if this Type Inherits from 
            another type.
            </summary>
        </member>
        <member name="P:Habanero.Smooth.ReflectionWrappers.TypeWrapper.HasBaseType">
            <summary>
            Returns the True if this Type Inherits from 
            another type.
            </summary>
        </member>
        <member name="P:Habanero.Smooth.ReflectionWrappers.TypeWrapper.IsBaseTypeLayerSuperType">
            <summary>
            Returns the Base Type if this Type Inherits from 
            another type.
            </summary>
        </member>
    </members>
</doc>
